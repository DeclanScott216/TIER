workflows:
  ios_appstore:
    name: iOS App Store Workflow
    max_build_duration: 60

    environment:
      groups:
        - AppStoreConnect   # must include PRIVATE_KEY (base64), KEY_ID, ISSUER_ID, BUNDLE_ID, APP_STORE_CONNECT_APPLE_ID (optional)
      flutter: stable
      xcode: latest
      cocoapods: default

    scripts:
      - name: Install dependencies
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          echo "üì¶ Installing Flutter & iOS dependencies..."
          flutter pub get
          cd ios || exit 1
          pod install --repo-update || true
          cd ..

      - name: Setup automatic iOS code signing
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          echo "üîê Setting up automatic iOS code signing..."

          # Required env vars (fail early)
          : "${PRIVATE_KEY:?PRIVATE_KEY is not set in env/group}"
          : "${KEY_ID:?KEY_ID is not set in env/group}"
          : "${ISSUER_ID:?ISSUER_ID is not set in env/group}"
          : "${BUNDLE_ID:?BUNDLE_ID is not set in env/group}"

          # Decode base64 safely and write the PEM to the project working directory
          # Use printf to preserve the exact base64 payload (avoid echo mangling newlines)
          printf "%s" "$PRIVATE_KEY" | tr -d '\r' | tr -d '\n' | base64 --decode > ./AuthKey.p8 || {
            echo "‚ùå Failed to decode PRIVATE_KEY; trying relaxed decode..."
            printf "%s" "$PRIVATE_KEY" | base64 --decode > ./AuthKey.p8
          }

          # Defensive cleaning: remove duplicate lines, normalize CRLF, ensure EOF newline
          awk '!seen[$0]++' ./AuthKey.p8 | sed 's/\r$//' > ./AuthKey.clean.p8
          mv ./AuthKey.clean.p8 ./AuthKey.p8
          # ensure newline at EOF
          if [ -n "$(tail -c1 ./AuthKey.p8)" ]; then echo >> ./AuthKey.p8; fi

          echo "‚úÖ ./AuthKey.p8 created (workspace path)"

          # Quick debug/preview (first + last lines) - safe to show in logs
          echo "----- PEM PREVIEW (head) -----"
          head -n6 ./AuthKey.p8 || true
          echo "------------------------------"
          echo "----- PEM PREVIEW (tail) -----"
          tail -n6 ./AuthKey.p8 || true
          echo "------------------------------"
          echo "File size (bytes): $(wc -c < ./AuthKey.p8)"

          # Validate structure
          if ! grep -q "^-----BEGIN PRIVATE KEY-----" ./AuthKey.p8; then
            echo "‚ùå Missing BEGIN PRIVATE KEY"
            exit 1
          fi
          if ! grep -q "^-----END PRIVATE KEY-----" ./AuthKey.p8; then
            echo "‚ùå Missing END PRIVATE KEY"
            exit 1
          fi

          # Keep only first PEM block (defensive)
          awk '/-----BEGIN PRIVATE KEY-----/{p=1} p{print} /-----END PRIVATE KEY-----/{p=0; exit}' ./AuthKey.p8 > ./AuthKey.first.p8
          mv ./AuthKey.first.p8 ./AuthKey.p8

          # Ensure UTF-8 (drop BOM if any) - best effort
          if command -v iconv >/dev/null 2>&1; then
            iconv -f utf-8 -t utf-8 -c ./AuthKey.p8 -o ./AuthKey.tmp.p8 && mv ./AuthKey.tmp.p8 ./AuthKey.p8 || true
          fi

          # Optional: check with openssl if available
          if command -v openssl >/dev/null 2>&1; then
            if openssl pkcs8 -in ./AuthKey.p8 -nocrypt -inform PEM -out /dev/null 2>/dev/null; then
              echo "‚úÖ OpenSSL parsed the key OK"
            else
              echo "‚ö†Ô∏è OpenSSL could not parse the key (will still try app-store-connect)"
            fi
          fi

          echo "üì° Fetching signing certificates & provisioning profiles from App Store Connect..."
          # Pass path that exists in the current working directory (not /tmp) so CLI can access it reliably
          # Note: app-store-connect CLI tolerates either inline PEM or file path; using file path here in same step
          app-store-connect fetch-signing-files \
            "$BUNDLE_ID" \
            --issuer-id "$ISSUER_ID" \
            --key-id "$KEY_ID" \
            --private-key ./AuthKey.p8 \
            --type IOS_APP_STORE \
            --create

      - name: Build iOS IPA
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          echo "üöÄ Building iOS IPA (signed by Xcode using downloaded profiles)..."
          # Remove --no-codesign if you want Xcode to sign using the downloaded profiles/certs
          flutter build ipa --release

      - name: Upload to App Store Connect (TestFlight)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          echo "üì§ Publishing IPA to TestFlight via app-store-connect CLI..."
          # Read key to inline variable (app-store-connect supports both file path and inline; inline is robust)
          PRIVATE_KEY_CONTENT="$(cat ./AuthKey.p8)"
          app-store-connect publish \
            --path "build/ios/ipa/*.ipa" \
            --issuer-id "$ISSUER_ID" \
            --key-id "$KEY_ID" \
            --private-key "$PRIVATE_KEY_CONTENT"

    artifacts:
      - build/ios/ipa/*.ipa
      - ./AuthKey.p8

